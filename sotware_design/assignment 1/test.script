# create-ledger <name> description <description> seed <seed>
create-ledger testLedger description "harvardTest ledger 2020" seed "harvardTestLedgerSeed"

# create five new accounts
create-account mary
create-account bob
create-account bill
create-account frank
create-account jane

# get account balance but expect error since not committed to a block
get-account-balance mary

# process five transactions
process-transaction 1 amount 1000 fee 10 note "fund account" payer master receiver mary
process-transaction 2 amount 1000 fee 10 note "fund account" payer master receiver bob
process-transaction 3 amount 1000 fee 10 note "fund account" payer master receiver bill
process-transaction 4 amount 1000 fee 10 note "fund account" payer master receiver frank
process-transaction 5 amount 1000 fee 10 note "fund account" payer master receiver mary

# validate the state of the blockchain
validate

# get account balance but expect error since not committed to a block
get-account-balance mary

# get account balances but expect error since there are no committed blocks
get-account-balances

# process five more transactions
process-transaction 6 amount 1000 fee 10 note "fund account" payer master receiver bob
process-transaction 7 amount 1000 fee 10 note "fund account" payer master receiver bill
process-transaction 8 amount 1000 fee 10 note "fund account" payer master receiver frank
process-transaction 9 amount 1000 fee 10 note "fund account" payer master receiver mary

# expect below to fail because transaction 10 doesnt exist yet
get-transaction 10

# create transaction 10, it should then go into the blockchain
process-transaction 10 amount 1000 fee 10 note "fund account" payer master receiver bob

# expect below to work because transaction 10 exists and is in the blockchain
get-transaction 10

# validate the state of the blockchain
validate

# expect balance of 3000 for mary
get-account-balance mary
# expect balance of 3000 for bob
get-account-balance bob
# expect balance of 2000 for bill
get-account-balance bill
# expect balance of 2000 for frank
get-account-balance frank
# expect balance of 0 for jane
get-account-balance jane

# show the details of block #1
get-block 1

#show the details of transaction 10
get-transaction 10

process-transaction 11 amount 200 fee 10 note "september rent" payer frank receiver jane

# expect balance of 2000 for frank
get-account-balance frank
# expect balance of 0 for jane
get-account-balance jane

# process 8 more transactions to create another block
process-transaction 12 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 13 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 14 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 15 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 16 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 17 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 18 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 19 amount 20 fee 10 note "uber" payer bob receiver mary
process-transaction 20 amount 20 fee 10 note "uber" payer bob receiver mary

# validate the state of the blockchain
validate

# expect balance of 200 for jane
get-account-balance jane

# expect balance of 1790 for frank
get-account-balance frank

# expect balance of 3180 for mary
get-account-balance mary

# expect balance of 2730 for bob
get-account-balance bob

# show all account balances
# master 2147473747
# mary 3180
# bob 2730
# bill 2000
# frank 1790
# jane 200
get-account-balances

# this transaction should fail since it exceeds the account balance for "bob".
process-transaction 21 amount 5000 fee 10 note "food" payer bob receiver mary

# this transaction should fail since the minimum fee is not provided
process-transaction 21 amount 20 fee 5 note "food" payer bob receiver mary

# this transaction should fail since the payer does not exist
process-transaction 21 amount 20 fee 10 note "uber" payer boborino receiver mary

# this transaction should fail since the receiver does not exist
process-transaction 21 amount 20 fee 10 note "uber" payer bob receiver maryland

# create a new account to make the above command successful
create-account maryland

# this transaction should now work since the receiver was just created
process-transaction 21 amount 20 fee 10 note "uber" payer bob receiver maryland

# get the new transaction, this should fail because transaction 21 has not been committed to the blockchain
get-transaction 21

# process transaction up to id 30
process-transaction 22 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 23 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 24 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 25 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 26 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 27 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 28 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 29 amount 20 fee 10 note "uber" payer bob receiver maryland
process-transaction 30 amount 20 fee 10 note "uber" payer bob receiver maryland

# get the new transaction, this should work now because its now in the blockchain
get-transaction 21

# expect balance of 2430 for bob
get-account-balance bob

# expect balance of 200 for maryland
get-account-balance maryland

# expect balance of 2147473847 for master
get-account-balance master

# validate the state of the blockchain
validate

# end